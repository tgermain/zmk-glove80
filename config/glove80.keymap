
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/* french helpers */
#include "keymap_french.h"

/*
Layers

Those numbers are meaningless.
The actual index of the layers is the one in keymap which are zero indexed.
*/
#define BASE    0
#define LOWER    1
#define MAGIC    2
#define ACCENT   3

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };
    };

    behaviors {
        s_d_cl: shift_double_capslock {
            compatible = "zmk,behavior-tap-dance";
            label = "shift_double_capslock";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        meh: meh_modifier {
            label = "MEH_MODIFIER";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LS(LC(LALT))>
                , <&macro_pause_for_release>
                , <&macro_release &kp LS(LC(LALT))>
                ;
        };
    };


    #define MACRO(name, keys)             \
    name: name##_macro {                  \
        label = #name;                    \
        compatible = "zmk,behavior-macro";\
        #binding-cells = <0>;             \
        tap-ms = <1>;                     \
        wait-ms = <1>;                    \
        bindings = <keys>;                \
    };


    // french accentuated letters
    #define diaeresis(name, key)    \
    MACRO(fr_ ## name ## _diaeresis, &kp FR_DIAE &kp key)

    #define circumflex(name, key)    \
    MACRO(fr_ ## name ## _circumflex, &kp FR_CIRC &kp key)

    macros {
        circumflex(a, Q)
        circumflex(e, E)
        circumflex(i, I)
        circumflex(o, O)
        circumflex(u, U)
        diaeresis(a, Q)
        diaeresis(e, E)
        diaeresis(i, I)
        diaeresis(o, O)
        diaeresis(u, U)
    };


    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */


    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp F1      &kp F2      &kp F3  &kp F4      &kp F5                                                                                                      &kp F6  &kp F7      &kp F8      &kp F9      &kp F10
&kp EQUAL   &kp N1      &kp N2  &kp N3      &kp N4      &kp N5                                                                                  &kp N6  &kp N7  &kp N8      &kp N9      &kp N0      &kp F11
&kp TAB     &kp Q       &kp W   &kp E       &kp R       &kp T                                                                                   &kp Y   &kp U   &kp I       &kp O       &kp P       &none
&kp ESC     &kp A       &kp S   &kp D       &kp F       &kp G                                                                                   &kp H   &kp J   &kp K       &kp L       &kp SEMI    &sl ACCENT
&s_d_cl     &kp Z       &kp X   &kp C       &kp V       &kp B       &kp BSPC        &s_d_cl &kp END         &kp PG_UP   &kp RCTRL   &kp RSHFT   &kp N   &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp PG_UP
&kp LCTRL   &kp LALT    &kp LGUI&kp LEFT    &kp RIGHT               &lt LOWER SPACE &meh    &kp HOME        &kp PG_DN   &kp RCTRL   &kp RET             &kp UP  &kp DOWN    &kp LBKT    &kp RBKT    &magic MAGIC BASE
            >;
        };

        lower_layer {
            bindings = <
&trans  &trans          &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                            &kp C_MUTE  &kp C_VOL_DN    &kp C_VOL_UP    &none           &kp PAUSE_BREAK
&trans  &trans          &trans      &trans      &trans      &trans                                                                      &kp LPAR    &kp KP_NUM  &kp KP_EQUAL    &kp KP_SLASH    &kp FR_ASTR     &kp PRINTSCREEN
&trans  &kp FR_LABK     &kp FR_AT   &kp FR_LCBR &kp FR_RCBR &kp FR_PIPE                                                                 &kp FR_UNDS &kp FR_7    &kp FR_8        &kp FR_9        &kp FR_MINS     &kp SCROLLLOCK
&trans  &kp FR_HASH     &kp FR_DLR  &kp FR_LPRN &kp FR_RPRN &kp FR_GRV                                                                  &kp FR_MINS &kp FR_4    &kp FR_5        &kp FR_6        &kp FR_PLUS     &trans
&trans  &kp FR_PERC     &kp FR_CIRC &kp FR_LBRC &kp FR_RBRC &kp FR_TILD     &trans  &trans  &to BASE            &trans  &trans  &trans  &kp KP_EQUAL&kp FR_1    &kp FR_2        &kp FR_3        &kp FR_BSLS     &trans
&trans  &kp CAPS        &kp INS     &kp F11     &kp F12                     &trans  &trans  &trans              &trans  &trans  &trans              &kp FR_0    &kp KP_DOT      &trans          &trans          &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR  &none            &none            &none            &none                                                                                                &none   &none   &none   &none   &bt BT_CLR_ALL
&none       &none            &none            &none            &none            &none                                                                       &none   &none   &none   &none   &none   &none
&trans      &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                             &none   &none   &none   &none   &none   &none
&bootloader &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                             &none   &none   &none   &none   &none   &bootloader
&reset      &none            &none            &none            &none            &none           &bt_2   &bt_3  &none                &none   &none   &none   &none   &none   &none   &none   &none   &reset
&none       &none            &none            &none            &none                            &bt_0   &bt_1  &out OUT_USB         &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

        accent_layer {
            bindings = <
&none       &none       &none       &none       &none                                                                                               &none           &none           &none       &none       &none
&none       &none       &none       &none       &none                   &none                                                           &none       &none           &none           &none       &none       &none
&none       &none       &none       &fr_a_diaeresis &fr_a_circumflex    &none                                                           &none       &fr_i_circumflex &fr_i_diaeresis&none       &none       &none
&none       &kp FR_EACU &kp FR_EGRV &fr_e_diaeresis &fr_e_circumflex    &none                                                           &none       &fr_o_circumflex &none          &none       &none       &none
&none       &none       &kp FR_UGRV &fr_u_diaeresis &fr_u_circumflex    &none       &none   &none   &none       &none   &none   &none   &none       &none           &none           &none       &none       &none
&none       &none       &none       &none       &none                               &none   &none   &none       &none   &none   &none               &none           &none           &none       &none       &none
            >;
        };
        /*
        layer_template {
            bindings = <
&none       &none       &none       &none       &none                                                                               &none       &none       &none       &none       &none
&none       &none       &none       &none       &none   &none                                                           &none       &none       &none       &none       &none       &none
&none       &none       &none       &none       &none   &none                                                           &none       &none       &none       &none       &none       &none
&none       &none       &none       &none       &none   &none                                                           &none       &none       &none       &none       &none       &none
&none       &none       &none       &none       &none   &none       &none   &none  &none        &none   &none   &none   &none       &none       &none       &none       &none       &none
&none       &none       &none       &none       &none               &none   &none  &none        &none   &none   &none               &none       &none       &none       &none       &none
            >;
        };
        */

    };
};
